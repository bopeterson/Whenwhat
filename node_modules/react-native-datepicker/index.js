import React, {Component} from 'react';
import PropTypes from 'prop-types';
import {
  View,
  Text,
  Modal,
  TouchableHighlight,
  DatePickerIOS,
  Animated,
  Keyboard,
  StyleSheet,
} from 'react-native';
import Style from './style';

class DatePicker extends Component {
  constructor(props) {
    super(props);

    this.state = {
      date: this.getDate(this.props.date),
      modalVisible: false,
      animatedHeight: new Animated.Value(0),
    };

    this.getDate = this.getDate.bind(this);
    this.datePicked = this.datePicked.bind(this);
    this.onPressDate = this.onPressDate.bind(this);
    this.onPressCancel = this.onPressCancel.bind(this);
    this.onPressConfirm = this.onPressConfirm.bind(this);
    this.onDateChange = this.onDateChange.bind(this);
    this.onPressMask = this.onPressMask.bind(this);
    this.setModalVisible = this.setModalVisible.bind(this);
  }

  setModalVisible(visible) {
    const {height, duration} = this.props;

    // slide animation
    if (visible) {
      this.setState({modalVisible: true});
      return Animated.timing(
        this.state.animatedHeight,
        {
          toValue: height,
          duration: duration
        }
      ).start();
    } else {
      return Animated.timing(
        this.state.animatedHeight,
        {
          toValue: 0,
          duration: duration
        }
      ).start(() => {
        this.setState({modalVisible: false});
      });
    }
  }

  onStartShouldSetResponder(e) {
    return true;
  }

  onMoveShouldSetResponder(e) {
    return true;
  }

  onPressMask() {
    if (this.props.maskAction==='confirm') {
      this.onPressConfirm();
    } else if (this.props.maskAction==='cancel') {
      this.onPressCancel();
    } else {
      //do nothing
    }
  }

  onPressCancel() {
    this.setModalVisible(false);

    if (typeof this.props.onCloseModal === 'function') {
      this.props.onCloseModal();
    }
  }

  onPressConfirm() {
    this.datePicked();
    this.setModalVisible(false);

    if (typeof this.props.onCloseModal === 'function') {
      this.props.onCloseModal();
    }
  }

  getDate(date) {
    //sets date to "now" if date is empty or null
    if (!date) {
      let now = new Date();
      return now;
    } else {
      return date;
    }
  }

  datePicked() {
    //triggered when confirm button clicked
    if (typeof this.props.onDateChange === 'function') {
      this.props.onDateChange(this.state.date);
    }
  }

  onDateChange(date) {
    //updates as soon as you scroll datepicker
    this.setState({
      date: date
    })
  }

  onPressDate() {
    if (this.props.disabled) {
      return true;
    }

    Keyboard.dismiss();

    this.setState({
      date: this.getDate(this.props.date)
    });

    this.setModalVisible(true);

    if (typeof this.props.onOpenModal === 'function') {
      this.props.onOpenModal();
    }
  }

  render() {
    const {
      mode,
      style,
      customStyles,
      disabled,
      minuteInterval,
      timeZoneOffsetInMinutes,
      cancelBtnText,
      confirmBtnText,
      TouchableComponent,
      testID,
      cancelBtnTestID,
      confirmBtnTestID
    } = this.props;

    const borderTopWidth=this.props.showBorderTop ? StyleSheet.hairlineWidth : 0;
    const borderLeftWidth=this.props.showBorderLeft ? StyleSheet.hairlineWidth : 0;
    const borderRightWidth=this.props.showBorderRight ? StyleSheet.hairlineWidth : 0;
    const borderBottomWidth=this.props.showBorderBottom ? StyleSheet.hairlineWidth : 0;
    
    return (
      <TouchableComponent
        style={[style,{borderTopWidth:borderTopWidth,borderLeftWidth:borderLeftWidth,borderRightWidth:borderRightWidth,borderBottomWidth:borderBottomWidth}]}
        underlayColor={'#FFFFFF'} activeOpacity={0.5}
        onPress={this.onPressDate}
        testID={testID}
      >
        <View style={[customStyles.dateTouchBody]}>
          <View>
            <Text style={customStyles.textStyle}>{this.props.placeholder}</Text>
          </View>
          <Modal
            transparent={true}
            animationType="none"
            visible={this.state.modalVisible}
            onRequestClose={() => {this.setModalVisible(false);}}
          >
            <View
              style={{flex: 1}}
            >
              <TouchableComponent
                style={Style.datePickerMask}
                activeOpacity={1}
                underlayColor={'#000000AA'}
                onPress={this.onPressMask}
              >
                <TouchableComponent
                  style={{flex: 1}}
                >
                  <Animated.View
                    style={[Style.datePickerCon, {height: this.state.animatedHeight}, customStyles.datePickerCon]}
                  >
                    <View>
                      <DatePickerIOS
                        date={this.state.date}
                        mode={mode}
                        onDateChange={this.onDateChange}
                        minuteInterval={minuteInterval}
                        timeZoneOffsetInMinutes={timeZoneOffsetInMinutes}
                        style={[Style.datePicker, customStyles.datePicker]}
                      />
                    </View>
                    <TouchableComponent
                      underlayColor={'transparent'}
                      onPress={this.onPressCancel}
                      style={[Style.btnText, Style.btnCancel, customStyles.btnCancel]}
                      testID={cancelBtnTestID}
                    >
                      <Text
                        style={[Style.btnTextText, Style.btnTextCancel, customStyles.btnTextCancel]}
                      >
                        {cancelBtnText}
                      </Text>
                    </TouchableComponent>
                    <TouchableComponent
                      underlayColor={'transparent'}
                      onPress={this.onPressConfirm}
                      style={[Style.btnText, Style.btnConfirm, customStyles.btnConfirm]}
                      testID={confirmBtnTestID}
                    >
                      <Text style={[Style.btnTextText, customStyles.btnTextConfirm]}>{confirmBtnText}</Text>
                    </TouchableComponent>
                  </Animated.View>
                </TouchableComponent>
              </TouchableComponent>
            </View>
          </Modal>
        </View>
      </TouchableComponent>
    );
  }
}

DatePicker.defaultProps = {
  mode: 'date',
  date: '',
  // component height: 216(DatePickerIOS) + 1(borderTop) + 42(marginTop), IOS only
  height: 259,

  // slide animation duration time, default to 300ms, IOS only
  duration: 300,
  confirmBtnText: 'Confirm',
  cancelBtnText: 'Cancel',
  customStyles: {},
  maskAction: 'none',
  disabled: false,
  placeholder: '',
  showBorderTop: false,
  TouchableComponent: TouchableHighlight,
  modalOnResponderTerminationRequest: e => true
};

DatePicker.propTypes = {
  mode: PropTypes.oneOf(['date', 'datetime', 'time']),
  date: PropTypes.oneOfType([PropTypes.string, PropTypes.instanceOf(Date)]),
  height: PropTypes.number,
  duration: PropTypes.number,
  maskAction: PropTypes.oneOf(['confirm','cancel','none']),
  confirmBtnText: PropTypes.string,
  cancelBtnText: PropTypes.string,
  customStyles: PropTypes.object,
  disabled: PropTypes.bool,
  showBorderTop: PropTypes.bool,
  onDateChange: PropTypes.func,
  onOpenModal: PropTypes.func,
  onCloseModal: PropTypes.func,
  placeholder: PropTypes.string,
  modalOnResponderTerminationRequest: PropTypes.func,
};

export default DatePicker;
